/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toModule = (module2) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// main.ts
__export(exports, {
  default: () => ThumbyPlugin
});
var import_obsidian = __toModule(require("obsidian"));
var ThumbyPlugin = class extends import_obsidian.Plugin {
  onload() {
    return __async(this, null, function* () {
      this.registerMarkdownCodeBlockProcessor("vid", (source, el, ctx) => __async(this, null, function* () {
        var _a, _b, _c;
        const url = source.trim().split("\n")[0];
        const sourcePath = typeof ctx == "string" ? ctx : (_c = (_b = ctx == null ? void 0 : ctx.sourcePath) != null ? _b : (_a = this.app.workspace.getActiveFile()) == null ? void 0 : _a.path) != null ? _c : "";
        const info = yield this.getVideoInfo(url);
        if (info.networkError) {
          el.createEl("a", { text: source, href: source });
          return;
        }
        if (!info.vidFound) {
          const msg = el.createDiv();
          const component = new import_obsidian.MarkdownRenderChild(msg);
          import_obsidian.MarkdownRenderer.renderMarkdown(`>[!WARNING] No video with that ID`, msg, sourcePath, component);
          return;
        }
        this.createThumbnail(el, info, url);
      }));
      this.addCommand({
        id: "insert-thumbnail-from-clipboard",
        name: "Insert thumbnail from URL in clipboard",
        editorCallback: (editor, view) => __async(this, null, function* () {
          const clipText = yield navigator.clipboard.readText();
          const id = this.getVideoId(clipText);
          if (id === "") {
            new import_obsidian.Notice("No video in clipboard");
            return;
          }
          editor.replaceSelection(`\`\`\`vid
${clipText}
\`\`\``);
          console.log("Insert video: ", id);
        })
      });
    });
  }
  onunload() {
  }
  createThumbnail(el, info, url) {
    const container = el.createEl("a", { href: url });
    container.addClass("thumbnail");
    container.createEl("img", { attr: { "src": info.thumbnail } }).addClass("thumbnail-img");
    const textBox = container.createDiv();
    textBox.addClass("thumbnail-text");
    textBox.createDiv({ text: info.title, title: info.title }).addClass("thumbnail-title");
    textBox.createEl("a", { text: info.author, href: info.authorUrl, title: info.author }).addClass("thumbnail-author");
  }
  getVideoInfo(url) {
    return __async(this, null, function* () {
      const info = {
        thumbnail: "",
        title: "",
        author: "",
        authorUrl: "",
        vidFound: false,
        networkError: false
      };
      let reqUrl = "";
      const videoId = this.getVideoId(url);
      const isYoutube = url.includes("https://www.youtube.com/watch?v=") || url.includes("https://youtu.be/");
      if (isYoutube) {
        reqUrl = `https://www.youtube.com/oembed?format=json&url=${url}`;
      } else if (url.includes("https://vimeo.com/")) {
        reqUrl = `https://vimeo.com/api/oembed.json?url=${url}`;
      } else {
        return info;
      }
      try {
        const reqParam = {
          url: reqUrl
        };
        const res = yield (0, import_obsidian.requestUrl)(reqParam);
        console.log(res);
        if (res.status === 200) {
          if (isYoutube) {
            info.thumbnail = `https://i.ytimg.com/vi/${videoId}/mqdefault.jpg`;
          } else {
            info.thumbnail = res.json.thumbnail_url;
          }
          info.title = res.json.title;
          info.author = res.json.author_name;
          info.authorUrl = res.json.author_url;
          info.vidFound = true;
        }
      } catch (error) {
        console.log(error);
        info.networkError = true;
      }
      return info;
    });
  }
  getVideoId(url) {
    let id = "";
    if (url.includes("https://www.youtube.com/watch?v=")) {
      const matches = url.match(/v=([-\w\d]+)/);
      if (matches !== null) {
        id = matches[1];
      }
    } else if (url.includes("https://youtu.be/")) {
      const matches = url.match(/youtu.be\/([-\w\d]+)/);
      if (matches !== null) {
        id = matches[1];
      }
    }
    return id;
  }
};
//# sourceMappingURL=data:application/json;base64,
